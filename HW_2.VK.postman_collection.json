{
	"info": {
		"_postman_id": "87d04b90-f2e6-493a-ae3d-332328199725",
		"name": "HW_2.VK",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21368688"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('This is the first responce from server!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let respName = jsonData.name;\r",
							"pm.test(\"Name\", function () {\r",
							"     pm.expect(respName).to.eql(\"Olga\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let respAge = jsonData.age;\r",
							"pm.test(\"Age\", function () {\r",
							"     pm.expect(respAge).to.eql(\"32\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let respSalary = jsonData.salary;\r",
							"pm.test(\"Salary\", function () {\r",
							"     pm.expect(respSalary).to.eql(1000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"console.log(reqData)\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let reqName = reqData.name;\r",
							"pm.test(\"Name=name\", function () {\r",
							"     pm.expect(respName).to.eql(reqName);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let reqAge = reqData.age;\r",
							"pm.test(\"Age=age\", function () {\r",
							"     pm.expect(respAge).to.eql(reqAge);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let reqSalary = reqData.salary;\r",
							"pm.test(\"Salary=salary\", function () {\r",
							"     pm.expect(JSON.stringify(respSalary)).to.eql(reqSalary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let respUsalary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"let req_salary_1_5 = reqSalary * 4;\r",
							"pm.test(\"USalary\", function () {\r",
							"     pm.expect(respUsalary_1_5).to.eql(req_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let respName = jsonData.name;\r",
							"let reqName = reqData.name;\r",
							"pm.test(\"Name=name\", function () {\r",
							"     pm.expect(respName).to.eql(reqName);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let respAge = jsonData.age;\r",
							"let reqAge = reqData.age;\r",
							"pm.test(\"Age=age\", function () {\r",
							"     pm.expect(respAge).to.eql(reqAge);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let respSalary = reqData.salary;\r",
							"let reqSalary = reqData.salary;\r",
							"pm.test(\"Salary=salary\", function () {\r",
							"     pm.expect(respSalary).to.eql(reqSalary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"CHECK dog name\", function () {\r",
							"pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"CHECK dog age\", function () {\r",
							"pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"CHECK dog name Luky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"CHECK dog age 4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=OLa&age=32&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "OLa"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name=name\", function () {\r",
							"     pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age=age\", function () {\r",
							"       pm.expect(JSON.stringify(jsonData.age)).to.eql(reqData.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary=salary\", function () {\r",
							"     pm.expect(JSON.stringify(jsonData.salary[0])).to.eql(reqData.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let reqSalary2 = jsonData.salary[0] * 2;\r",
							"pm.test(\"Salary2=salary*2\", function () {\r",
							"     pm.expect(reqSalary2).to.eql(Number(jsonData.salary[1]));\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let reqSalary3 = jsonData.salary[0] * 3;\r",
							"pm.test(\"Salary3=salary*3\", function () {\r",
							"     pm.expect(reqSalary3).to.eql(Number(jsonData.salary[2]));\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"let reqName = reqData.name;\r",
							"// 16. Создать в окружении переменную age\r",
							"let reqAge = reqData.age;\r",
							"// 17. Создать в окружении переменную salary\r",
							"let reqSalary = reqData.salary;\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",reqName);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqAge);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",reqSalary);\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i=0; i<jsonData.salary.length; i++){\r",
							"     console.log(\"salary\",jsonData.salary[i]);\r",
							" }\r",
							"\r",
							" console.log(pm.environment.get(\"salary\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Ola&age=32&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ola"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"     console.log(response.json());\r",
							"});\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"CHECK start_qa_salary\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"CHECK qa_salary_after_6_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"CHECK qa_salary_after_12_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"CHECK qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"CHECK qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"CHECK person\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary=salary\", function () {\r",
							"     pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(reqData.salary*2));\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(reqData.salary*2.7));\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(reqData.salary*2.7));\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"     pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(reqData.salary*3.8));\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_1=salary\", function () {\r",
							"     pm.expect(jsonData.person.u_name[1]).to.eql(Number(reqData.salary));\r",
							"});\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=age\", function () {\r",
							"     pm.expect(jsonData.person.u_age).to.eql(Number(reqData.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(reqData.salary*4.2));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name ",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}